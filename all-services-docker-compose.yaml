services:
  n8n:
    image: docker.n8n.io/n8nio/n8n
    container_name: n8n
    volumes:
      - ./data/n8n/.n8n:/home/node/.n8n
      - ./data/n8n/files:/files
    tty: true
    stdin_open: true
    restart: always
    user: "1000:1000"
    environment:
      - N8N_RUNNERS_ENABLED=true
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_EDITOR_BASE_URL=https://n8n.smart-me.sh
      - N8N_HOST=0.0.0.0
      - N8N_PROXY_HOPS=1
      - WEBHOOK_URL=https://n8n.smart-me.sh/
      - GENERIC_TIMEZONE=Europe/Berlin
#     - N8N_LOG_LEVEL=debug
    depends_on:
      - browserless
    networks:
      - local-ag-01

  browserless:
    image: browserless/chrome:latest
    container_name: browserless
    restart: always
    ports:
      - "3000:3000"  # Debugging-Port für Headless Chrome
    environment:
      - ENABLE_DEBUGGER=false
      - CONNECTION_TIMEOUT=30000
      - TOKEN=6ZDRG03W523TZ135510
    networks:
      - local-ag-01

  nginx-proxy-manager:
    image: 'docker.io/jc21/nginx-proxy-manager:latest'
    container_name: 'nginx-proxy-manager'
    restart: always
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - ./data/nginx/data:/data
      - ./data/nginx/letsencrypt:/etc/letsencrypt
    networks:
      - local-ag-01

  ollama:
    image: ollama/ollama:${OLLAMA_DOCKER_TAG-latest}
    container_name: ollama
    volumes:
      - ./data/ollama:/root/.ollama
    tty: true
    restart: unless-stopped
    networks:
      - local-ag-01

  open-webui:
    build:
      context: .
      args:
        OLLAMA_BASE_URL: '/ollama'
      dockerfile: Dockerfile
    image: ghcr.io/open-webui/open-webui:${WEBUI_DOCKER_TAG-main}
    container_name: open-webui
    volumes:
      - ./data/open-webui:/app/backend/data
    depends_on:
      - ollama
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - USER_AGENT=open-webui-bot'
      - WEBUI_SECRET_KEY=
    extra_hosts:
      - host.docker.internal:host-gateway
    restart: unless-stopped
    networks:
      - local-ag-01

  redis:
    container_name: redis
    image: docker.io/valkey/valkey:8-alpine
    command: valkey-server --save 30 1 --loglevel warning
    restart: always
    networks:
      - local-ag-01
    volumes:
      - ./data/valkey-data2:/data
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  searxng:
    container_name: searxng
    image: docker.io/searxng/searxng:latest
    restart: always
    networks:
      - local-ag-01
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - ./data/searxng:/etc/searxng:rw
    environment:
      - SEARXNG_BASE_URL=https://${SEARXNG_HOSTNAME:-localhost}/
      - UWSGI_WORKERS=${SEARXNG_UWSGI_WORKERS:-4}
      - UWSGI_THREADS=${SEARXNG_UWSGI_THREADS:-4}
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:lts
    command: -H unix:///var/run/docker.sock
    restart: always
    ports:
      - 8000:8000
      - 9443:9443
    environment:
      - VIRTUAL_HOST=portainer.smart-me.sh
      - VIRTUAL_PORT=9000
    networks:
      - local-ag-01
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/portainer:/data portainer/portainer-ce:lts

  flowise:
    image: flowiseai/flowise
    container_name: flowise
    restart: always
    environment:
       - PORT=3000
       - FLOWISE_USERNAME=andre
       - FLOWISE_PASSWORD=T&ttPtMD4%xPF&K!9fv2h@Uc#Ep@t7ju
       - DATABASE_PATH=/root/.flowise
       - APIKEY_PATH=/root/.flowise/apikeys
       - LOG_PATH=/root/.flowise/logs
    ports:
       - '8082:3000'
    networks:
       - local-ag-01
    volumes:
       - ./data/flowise:/root/.flowise
    entrypoint: /bin/sh -c "sleep 3; flowise start"

  docling:
    image: quay.io/docling-project/docling-serve
    container_name: docling
    restart: always
    ports:
      - '5001:5001'
    environment:
      - DOCLING_SERVE_ENABLE_UI=true
    networks:
      - local-ag-01

networks:
  local-ag-01:
    driver: bridge  # Standardmäßig als "bridge" konfiguriert, nicht "internal"
